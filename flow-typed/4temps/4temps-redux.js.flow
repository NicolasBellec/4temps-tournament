// @flow

declare type ReduxDispatch = Dispatch<ReduxPackAction>;
declare type ReduxState = {
  user: UserReduxState,
  tournaments: TournamentsReduxState,
  participants: ParticipantsReduxState,
  rounds: RoundsReduxState,
  judges: JudgesReduxState,
  assistants: AssistantsReduxState,

  accessKeys: AccessKeysReduxState,
  notes: NotesReduxState,
  leaderboards: LeaderboardsReduxState,

  ui: {
    judgeLogin: UiJudgeLoginReduxState,
    login: UiLoginReduxState,
    signUp: UiSignUpReduxState,

    createTournament: UiCreateTournamentsReduxState,
    editTournament: UiEditTournamentsReduxState,

    createParticipant: UiCreateParticipantsReduxState,
    createRound: UiCreateRoundReduxState,
    createJudge: UiCreateJudgeReduxState,
    createAssistant: UiCreateAssistantReduxState,

    notes: UiNotesReduxState,

    settleDraw: UiSettleDrawReduxState,
  }
};

declare type UserRoleReduxState = '' | 'admin' | 'judge' | 'assistant';

declare type UserReduxState = {
  id: string,
  role: UserRoleReduxState,
  tournamentId: string // only set for judge and assistant
};

declare type TournamentViewModel = {
  id: string,
  creatorId: string,
  name: string,
  date: Moment,
  type: TournamentType,
  dancesNoted: {
    [judgeId: string]: Array < string >
  },
  judges: Array < string > ,
  assistants: Array < string >,
  participants: Array < string > ,
  rounds: Array < string > ,
};

declare type TournamentsReduxState = {
  isLoading: boolean,
  isInvalidated: boolean,
  didLoadAdminTournaments: boolean,

  forAdmin: Array < string > ,
  allIds: Array < string > ,
  forJudge: string,
  byId: {
    [id: string]: TournamentViewModel
  }
};

declare type ParticipantsReduxState = {
  isLoading: boolean,

  forTournament: {
    [id: string]: Array < string >
  },
  byId: {
    [id: string]: Participant
  }
};

declare type RoundsReduxState = {
  isLoading: boolean,
  forTournament: {
    [id: string]: Array < string >
  },
  byId: {
    [id: string]: Round
  }
};

declare type JudgesReduxState = {
  forTournament: {
    [id: string]: Array < string >
  },
  byId: {
    [id: string]: Judge
  }
};

declare type AssistantsReduxState = {
  forTournament: {
    [id: string]: Array < string >
  },
  byId: {
    [id: string]: Assistant
  }
};

declare type AccessKeysReduxState = {
  [id: string]: AccessKey
};

declare type NotesReduxState = {
  isLoading: boolean,
  didLoad: boolean,
  byParticipant: {
    [participantId: string]: {
      [criterionId: string]: JudgeNote
    }
  }
};

declare type LeaderboardsReduxState = {
  byId: {
    [tournamentId: string]: Leaderboard
  }
};

declare type UiLoginReduxState = {
  isLoading: boolean,
  isValid: boolean,
  isValidEmail: boolean,
  isValidPassword: boolean,
  doesAdminExist: boolean
};

declare type UiJudgeLoginReduxState = {
  isLoading: boolean,
  isValidAccessKey: boolean,
  doesAccessKeyExist: boolean
};

declare type UiSignUpReduxState = {
  isLoading: boolean,
  validation: AdminCreateValidationSummary
};

declare type UiCreateTournamentsReduxState = {
  isLoading: boolean,
  validation: TournamentValidationSummary
};

declare type UiEditTournamentsReduxState = {
  isValidName: boolean,
  isValidDate: boolean
};

declare type UiCreateParticipantsReduxState = {
  isLoading: boolean,
  createdSuccessfully: boolean,
  validation: ParticipantValidationSummary
};

declare type UiCreateRoundReduxState = {
  isLoading: boolean,
  createdSuccessfully: boolean,
  validation: RoundValidationSummary
};

declare type UiCreateJudgeReduxState = {
  isLoading: boolean,
  createdSuccessfully: boolean,
  isValid: boolean
};

declare type UiCreateAssistantReduxState = {
  isLoading: boolean,
  createdSuccessfully: boolean,
  isValid: boolean
};

declare type UiNotesReduxState = {
  selectedPair: ? string,
  isLoading: boolean,
  didSubmit: boolean,
  successfulSubmit: boolean
};

declare type UiSettleDrawReduxState = {
  isLoading: boolean,
  didSubmit: boolean,
  successfulSubmit: boolean,
  errorMessage: string
};

// type ExtractPromiseType = <T>(Promise<T>) => T;
//
// declare type BetterReduxPackAction<action> = {
//   type: $PropertyType<action, 'type'>,
//   payload: $PropertyType<action, 'payload'>,
//   meta: {
//     onSuccess: (
//       result: ?$Call<ExtractPromiseType, $PropertyType<action,'payload'>>,
//       getState: ReduxState
//     ) => mixed
//   }
// };
//
// declare type ReduxPackAction = BetterReduxPackAction<ReduxAction>;

declare type ReduxPackAction = {
  type: string,
  payload: any,
  meta: mixed
};

declare type ReduxAction =
  | LogoutAction
  | LoginAction
  | GetAllTournamentsAction
  | GetAdminTournamentsAction
  | TournamentUpdatedAction
  | CreateTournamentAction
  | EditTournamentAction
  | CreateParticipantAction
  | SignUpAction
  | CreateRoundAction
  | DeleteRoundAction
  | CreateJudgeAction
  | StartRoundAction
  | LoginWithAccessKeyAction
  | GetAccessKeysAction
  | StartNextDanceAction
  | EndDanceAction
  | ChangeAttendanceAction
  | GetJudgeTournamentAction
  | GetSingleTournamentAction
  | GenerateGroupsAction
  | GetNotesAction
  | SetNoteAction
  | SelectPairAction
  | GetLeaderboardAction
  | CreateAssistantAction
  | SettleDrawAction
  | SubmitNotesAction;

// Redux Actions
declare type LogoutAction = {
  type: 'LOGOUT_USER',
  promise: Promise < boolean > ,
  meta: {
    onSuccess: () => mixed
  }
};

declare type LoginAction = {
  type: 'LOGIN_USER',
  promise: Promise < AdminLoginValidationSummary > ,
  meta: {
    onSuccess: () => mixed
  }
};

declare type GetAllTournamentsAction = {
  type: 'GET_ALL_TOURNAMENTS',
  promise: Promise < mixed >
};

declare type GetAdminTournamentsAction = {
  type: 'GET_ADMIN_TOURNAMENTS',
  promise: Promise < mixed >,
  meta: {
    onSuccess: (mixed, () => ReduxState) => void
  }
};

declare type TournamentUpdatedAction = {
  type: 'TOURNAMENT_UPDATED',
  payload: mixed
};

declare type CreateTournamentAction = {
  type: 'CREATE_TOURNAMENT',
  promise: Promise < Tournament > ,
  meta: {
    onSuccess: (tournament: Tournament) => mixed
  }
};
declare type EditTournamentAction = {
  type: 'EDIT_TOURNAMENT',
  promise: Promise < Tournament >
};

declare type CreateParticipantAction = {
  type: 'CREATE_PARTICIPANT',
  promise: Promise < {
    tournamentId: string,
    participant: Participant
  } >
};

declare type SignUpAction = {
  type: 'SIGNUP',
  promise: Promise < AdminCreateValidationSummary > ,
  meta: {
    onSuccess: () => mixed
  }
};

declare type CreateRoundAction = {
  type: 'CREATE_ROUND',
  promise: Promise < Round >
};

declare type DeleteRoundAction = {
  type: 'DELETE_ROUND',
  promise: Promise < {
    tournamentId: string,
    roundId: string
  } >
};

declare type CreateJudgeAction = {
  type: 'CREATE_JUDGE',
  promise: Promise < mixed >
};

declare type CreateAssistantAction = {
  type: 'CREATE_ASSISTANT',
  promise: Promise < mixed >
};

declare type StartRoundAction = {
  type: 'START_ROUND',
  promise: Promise < mixed >,
  meta: {
    onSuccess: () => void
  }
};
declare type LoginWithAccessKeyAction = {
  type: 'LOGIN_WITH_ACCESS_KEY',
  promise: Promise < mixed >,
  meta: {
    onSuccess: () => void
  }
};

declare type GetAccessKeysAction = {
  type: 'GET_ACCESS_KEYS',
  promise: Promise < mixed >
};

declare type StartNextDanceAction = {
  type: 'START_NEXT_DANCE',
  promise: mixed
};

declare type ChangeAttendanceAction = {
  type: 'CHANGE_ATTENDANCE',
  promise: Promise<mixed>
};

declare type GetJudgeTournamentAction = {
  type: 'GET_JUDGE_TOURNAMENT',
  promise: Promise<mixed>,
  meta: {
    onSuccess: (mixed, () => reduxState) => void
  }
};

declare type GetSingleTournamentAction = {
  type: 'GET_SINGLE_TOURNAMENT',
  promise: Promise<mixed>,
  meta: {
    onSuccess: () => void,
  },
};

declare type GenerateGroupsAction = {
  type: 'GENERATE_GROUPS',
  promise: mixed
};

declare type EndDanceAction = {
  type: 'END_DANCE',
  promise: mixed
};

declare type GetNotesAction = {
  type: 'GET_NOTES',
  promise: mixed
};

declare type SetNoteAction = {
  type: 'SET_NOTE',
  promise: Promise< mixed >,
  payload: mixed
};

declare type SelectPairAction = {
  type: 'SELECT_PAIR',
  payload: string
};

declare type GetLeaderboardAction = {
  type: 'GET_LEADERBOARD',
  promise: mixed
};

declare type SettleDrawAction = {
  type: 'SETTLE_DRAW',
  promise: mixed
};

declare type SubmitNotesAction = {
  type: 'SUBMIT_NOTES',
  promise: Promise<mixed>
};
